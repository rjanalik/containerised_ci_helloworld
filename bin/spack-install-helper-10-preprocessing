#!/bin/bash

# Steps in this module:
# - Process target architecture

# cuda compute capability:
# P100 = 6.0
# A100 = 8.0
# H100 = 9.0

flag_in_list() {
    for arg in "$@"
    do
        if [[ "$arg" == --* ]]; then
            return 0
        fi
    done

    return 1
}

SPACK_REPO_LIST=()
SPECS=()
SPECS_ONLY_DEPENDENCIES=()
TARGET_MACHINE=

POSSIBLE_TARGETS="daint-gpu daint-mc alps-zen2 alps-a100 alps-mi200 alps-gh200 alps-mi300a"
DEFAULT_VARIANTS="+openmp +mpi build_type=Release"
CUDA_EXTERNAL_DEF=""
ROCM_EXTERNAL_DEF=""
ROCM_ARCH=""
CUDA_ARCH=""

CUDA_EXTERNAL_DEF_TEMPLATE="cuda: {externals: [{spec: cuda@$ALSO_CUDA_VERSION, prefix: /usr/local/cuda}], buildable: false}"
ROCM_EXTERNAL_DEF_TEMPLATE=$(cat <<- EOF
llvm-amdgpu:
      externals:
      - spec: llvm-amdgpu@${ROCM_VERSION} ~rocm-device-libs
        prefix: /opt/rocm-${ROCM_VERSION}/llvm
      buildable: false
    rocm-device-libs:
      externals:
      - spec: rocm-device-libs@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    hip:
      externals:
      - spec: hip@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocblas:
      externals:
      - spec: rocblas@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocsolver:
      externals:
      - spec: rocsolver@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocprim:
      externals:
      - spec: rocprim@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    rocthrust:
      externals:
      - spec: rocthrust@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
    hsa-rocr-dev:
      externals:
      - spec: hsa-rocr-dev@${ROCM_VERSION}
        prefix: /opt/rocm-${ROCM_VERSION}
      buildable: false
EOF
)

# This is to ensure backwards compatibility
# If there are no flags starting with --XXX, we assume arguments
# spack-install-helper target-machine spec1 spec2
if ! flag_in_list "$@"
then
    TARGET_MACHINE=$1
    shift
fi

while [[ $# -gt 0 ]]
do
    case $1 in
        --add-repo )
            SPACK_REPO_LIST+=("$2")
            shift
            shift
            ;;
        --add-repo=* )
            SPACK_REPO_LIST+=("${1#'--add-repo='}")
            shift
            ;;
        --target )
            TARGET_MACHINE="$2"
            shift
            shift
            ;;
        --target=* )
            TARGET_MACHINE="${1#'--target='}"
            shift
            ;;
        --only-dependencies )
            SPECS+=("$2")
            SPECS_ONLY_DEPENDENCIES+=("$2")
            shift
            shift
            ;;
        --only-dependencies=* )
            VAL="${1#'--only-dependencies='}"
            SPECS+=("$VAL")
            SPECS_ONLY_DEPENDENCIES+=("$VAL")
            shift
            ;;
        * )
            SPECS+=("$1")
            shift
            ;;
    esac
done

# Always add mpich
SPECS+=('mpich@3.1.4 netmod=tcp device=ch3')

case $TARGET_MACHINE in
    daint-gpu)
        CUDA_ARCH="60"
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} cuda_arch=${CUDA_ARCH} +cuda"
        CUDA_EXTERNAL_DEF=${CUDA_EXTERNAL_DEF_TEMPLATE}
        TARGET="haswell"
        ;;
    daint-mc)
        TARGET="broadwell"
        ;;
    alps-zen2)
        TARGET="zen2" # AMD EPYC 7742 64-Core Processor
        ;;
    alps-a100)
        CUDA_ARCH="80"
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} cuda_arch=${CUDA_ARCH} +cuda" # NVIDIA A100-SXM4-80GB
        CUDA_EXTERNAL_DEF=${CUDA_EXTERNAL_DEF_TEMPLATE}
        TARGET="zen3" # AMD EPYC 7713 64-Core Processor
        ;;
    alps-mi200)
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} amdgpu_target=gfx90a:xnack- +rocm" # gfx90a (amdgcn-amd-amdhsa--gfx90a:sramecc+:xnack-)
        ROCM_EXTERNAL_DEF=${ROCM_EXTERNAL_DEF_TEMPLATE}
        ROCM_ARCH="gfx90a"
        TARGET="zen3" # TODO AMD EPYC 7A53 64-Core Processor # TODO is it 7A53 or 7453?
        ;;
    alps-gh200)
        CUDA_ARCH="90"
        DEFAULT_VARIANTS="${DEFAULT_VARIANTS} cuda_arch=${CUDA_ARCH} +cuda" # NVIDIA GH200 (H100 GPU)0
        CUDA_EXTERNAL_DEF=${CUDA_EXTERNAL_DEF_TEMPLATE}
        TARGET="neoverse_v2" # NVIDIA GH200 (Grace CPU is Neoverse V2 architecture)
        ;;
    alps-mi300a)
        #TODO
        ;;
    *)
        echo "The target argument must be any of '$POSSIBLE_TARGETS'."
        exit 1
        ;;
esac


# at this point the rest of the arguments are supposed to be valid spack sepcs

if [[ -z "${TARGET}" ]] ; then
    echo "There is a bug in $0, because TARGET is empty"
    exit 1
fi

echo "arch: ${TARGET_MACHINE}"
for i in "${SPACK_REPO_LIST[@]}"
do
    echo "repo: ${i}"
done
for i in "${SPECS_ONLY_DEPENDENCIES[@]}"
do
    echo "spec only dependencies: ${i}"
done
for i in "${SPECS[@]}"
do
    echo "spec: ${i}"
done
