include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext.yml'

stages:
  - build_base_image
  - build_test_images
  - test_test_images
    #- deploy_base_image

# Versions to build
.null: &UBUNTU_VERSIONS ["22.04"]
.null: &SPACK_VERSIONS ["0.20.3", "0.21.0"]
.null: &CUDA_VERSIONS ["11.7.1"]
.null: &ROCM_VERSIONS ["5.6.1", "5.7"]

variables:
  REGISTRY_PATH: "$CSCS_REGISTRY_PATH/$CI_COMMIT_SHORT_SHA"

build_job_base_image:
  stage: build_base_image
  extends: .container-builder-cscs-zen2
  parallel:
    matrix:
      - ARCH: "cpu"
        UBUNTUVER: *UBUNTU_VERSIONS
        SPACKVER: *SPACK_VERSIONS
      - ARCH: "cuda"
        UBUNTUVER: *UBUNTU_VERSIONS
        SPACKVER: *SPACK_VERSIONS
        CUDAVER: *CUDA_VERSIONS
      - ARCH: "rocm"
        UBUNTUVER: *UBUNTU_VERSIONS
        SPACKVER: *SPACK_VERSIONS
        ROCMVER: *ROCM_VERSIONS
  rules:
    - if: $ARCH == "cpu"
      variables:
        ARCH_STR: "cpu"
        BASEIMG: "docker.io/ubuntu:${UBUNTUVER}"
    - if: $ARCH == "cuda"
      variables:
        ARCH_STR: "cuda${CUDAVER}"
        BASEIMG: "docker.io/nvidia/cuda:${CUDAVER}-devel-ubuntu${UBUNTUVER}"
    - if: $ARCH == "rocm"
      variables:
        ARCH_STR: "rocm${ROCMVER}"
        BASEIMG: "docker.io/rocm/dev-ubuntu-${UBUNTUVER}:${ROCMVER}-complete"
        DOCKER_BUILD_ARGS: '["BASEIMG=${BASEIMG}", "SPACK_VER=${SPACKVER_WITH_V}", "ROCM_VERSION=${ROCMVER}"]'
  variables:
    IMAGE_TYPE: "base"
    DOCKERFILE: "docker/Dockerfile_spack_baseimage_ubuntu${UBUNTUVER}"
    SPACKVER_WITH_V: "v${SPACKVER}"
    SPACK_STR: "spack${SPACKVER}"
    UBUNTU_STR: "ubuntu${UBUNTUVER}"
    PERSIST_IMAGE_NAME: "${REGISTRY_PATH}/spack-${IMAGE_TYPE}:${SPACK_STR}-${UBUNTU_STR}-${ARCH_STR}"
    DOCKER_BUILD_ARGS: '["BASEIMG=${BASEIMG}", "SPACK_VER=${SPACKVER_WITH_V}"]'
  script:
    - echo "${DOCKERFILE}"
    - echo "${BASEIMG}"
    - echo "${SPACKVER}"
    - echo "${SPACK_STR}"
    - echo "${CPUVER}"
    - echo "${CUDAVER}"
    - echo "${PERSIST_IMAGE_NAME}"
    - echo "${DOCKER_BUILD_ARGS}"
    - build_new_container

build_job_helper_image:
  stage: build_base_image
  extends: .container-builder-cscs-zen2
  parallel:
    matrix:
      - ARCH: "cpu"
        UBUNTUVER: *UBUNTU_VERSIONS
      - ARCH: "cuda"
        UBUNTUVER: *UBUNTU_VERSIONS
        CUDAVER: *CUDA_VERSIONS
      - ARCH: "rocm"
        UBUNTUVER: *UBUNTU_VERSIONS
        ROCMVER: *ROCM_VERSIONS
  rules:
    - if: $ARCH == "cpu"
      variables:
        ARCH_STR: "cpu"
        BASEIMG: "docker.io/ubuntu:${UBUNTUVER}"
    - if: $ARCH == "cuda"
      variables:
        ARCH_STR: "cuda${CUDAVER}"
        BASEIMG: "docker.io/nvidia/cuda:${CUDAVER}-devel-ubuntu${UBUNTUVER}"
    - if: $ARCH == "rocm"
      variables:
        ARCH_STR: "rocm${ROCMVER}"
        BASEIMG: "docker.io/rocm/dev-ubuntu-${UBUNTUVER}:${ROCMVER}-complete"
  variables:
    IMAGE_TYPE: "helper"
    DOCKERFILE: "docker/Dockerfile_base_helper"
    UBUNTU_STR: "ubuntu${UBUNTUVER}"
    PERSIST_IMAGE_NAME: "${REGISTRY_PATH}/spack-${IMAGE_TYPE}:${UBUNTU_STR}-${ARCH_STR}"
    DOCKER_BUILD_ARGS: '["BASEIMG=${BASEIMG}"]'
  script:
    - echo "${DOCKERFILE}"
    - echo "${BASEIMG}"
    - echo "${SPACKVER}"
    - echo "${SPACK_STR}"
    - echo "${CPUVER}"
    - echo "${CUDAVER}"
    - echo "${PERSIST_IMAGE_NAME}"
    - echo "${DOCKER_BUILD_ARGS}"
    - build_new_container

      #build_job_image_a:
      #  stage: build_images
      #  extends: .container-builder-cscs-zen2
      #  variables:
      #    DOCKERFILE: ci/docker/Dockerfile.build
      #    PERSIST_IMAGE_NAME: $TEST_A_IMAGE_NAME
      #  script:
      #    - echo "Build test image a"

      #test_job:
      #  stage: test
      #  extends: .container-runner-daint-gpu
      #  image: $PERSIST_IMAGE_NAME
      #  script:
      #    - /opt/helloworld/bin/hello
      #  variables:
      #    SLURM_JOB_NUM_NODES: 2
      #    SLURM_PARTITION: debug
      #    SLURM_NTASKS: 2
